#! /usr/bin/python3


import sqlite3
from sqlite3 import Error
import datetime
import time
import matplotlib.pyplot as plt
import sys

debug = True

def create_connection(db_file):
    """ create a database connection to the SQLite database
        specified by the db_file
    :param db_file: database file
    :return: Connection object or None
    """
    conn = None
    try:
        conn = sqlite3.connect(db_file)
    except Error as e:
        print(e)

    return conn


def select_all_tasks(conn, y, m, d, h, t, p):
    """
    Query all rows in the extension_powerNow table
    :param conn: the Connection object
    :return:
    """
    if debug: print ("y=",y, " m=",m, " d=",d, " h=",h, " t=",t, " p=",p)
    cur = conn.cursor()
    #cur.execute("SELECT * FROM extension_powerNow")
    cur.execute("SELECT * FROM "+t)


    passed_in_time = (y,m,d,  h,0,0,   0,0,0)

    # Always ue this as it takes care of DST !
    #now_struct_time = time.localtime()
    now_struct_time = passed_in_time
    print ("Current local time as struct_time: ");
    print (now_struct_time) 
    # time.struct_time(tm_year=2022, tm_mon=9, tm_mday=8, tm_hour=13, tm_min=9, tm_sec=14, tm_wday=3, tm_yday=251, tm_isdst=0)
    year  = now_struct_time[0]
    month = now_struct_time[1]
    day   = now_struct_time[2]

    if (p == "Day"):
      first = (year, month, day,  0, 0,0, 0,0,0)
      first_ticks = int(time.mktime(first))
      if debug: print ("First ticks: ", first_ticks)

      last = (year, month, day,  23, 59,59, 0,0,0)
      last_ticks = int(time.mktime(last))
      if debug:  print ("Last ticks:  ", last_ticks)

    else:
      print("To be finished...")
      exit(-2)


    rows = cur.fetchall()

    i = 0
    ticks_per_hour = 60 * 60
    hour_later_ticks = first_ticks + ticks_per_hour
    hours = 0
    daily_total = 0
    hourly_total = 0
    hourly_count = 0
    for row in rows:
        # ticks = 52707330000
        #d = datetime.datetime(1, 1, 1) + datetime.timedelta(microseconds = row//10)
        row_ticks = int( row[0] / 1000 )
        usage = row[1]
        '''
        if ((row_ticks >= first_ticks) and (row_ticks <= last_ticks)):
          #print( ticks, usage )
          dt = datetime.datetime.fromtimestamp( row_ticks )
          print(row_ticks, dt, usage)
          #print(row)
          i = i + 1
          #if (i == 5): break
        '''
        if (row_ticks > hour_later_ticks):
          hourly_average = 0
          if (hourly_count > 0): hourly_average = int(hourly_total / hourly_count)
          daily_total = daily_total + hourly_average
          #print(row_ticks, dt, hourly_total, hourly_count, hourly_average)
          print(hours, hourly_average, daily_total)
          plot_tuples.append( (hours, hourly_average, daily_total) )
          #plot_tuples.append( (""+str(hours)+":00", hourly_average, daily_total) )
          hour_later_ticks = hour_later_ticks + ticks_per_hour
          hours = hours + 1
          hourly_total = 0
          hourly_count = 0
          if (hours > 23): break

        if ((row_ticks >= first_ticks) and (row_ticks <= hour_later_ticks)):
          #print( ticks, usage )
          dt = datetime.datetime.fromtimestamp( row_ticks )
          #print(row_ticks, dt, usage)
          hourly_total = hourly_total + usage
          hourly_count = hourly_count + 1
          #print(row)
          i = i + 1
          #if (i == 5): break



def main():

    n = len(sys.argv)
    print( "Number of arguments: " + str(n) + " arguments." )
    print( "Argument List: " + str(sys.argv) )

    # So how many ways will we use this?
    # 1) 2022 09 10 21 house    - gets that hour's usage
    # 2) 2022 09 10 extension   - gets that day's usage
    # 3) 2022 09 extension      - gets that month's usage
    # 4) 2022 08 extension      - gets previous month's usage
    if ((n < 4) or (n > 6)): 
        print( "Usage:  specify a date/hour and type i.e. " + str(sys.argv[0]) + " 2022 07 {22} {10} [house | extension]" )
        print( "NOTE: day and hour are optional and used to generate the daly and hourly respectively" )
        exit( -1 )

    year  = int(sys.argv[1])
    month = int(sys.argv[2])
    day   = 0
    hour  = 0
    if (n == 4):
      where = sys.argv[3]
      period = "Month"
    elif (n == 5):
      day   = int(sys.argv[3])
      where = sys.argv[4]
      period = "Day"
    elif (n == 6):
      day   = int(sys.argv[3])
      hour  = int(sys.argv[4])
      where = sys.argv[5]
      period = "Hour"

    # Now lets check these values!
    if (year != 2022):
        print( "ERROR: Only 2022 allowed as year and not "+year )
        exit(-1)

    if (day > 31):
        print( "ERROR: Day must not be more than 31 and not "+day )
        exit(-1)

    if (hour > 23):
        print( "ERROR: Hour must be 0 to 23 and not "+day )
        exit(-1)

    if (where == "house"):
        table = "house_powerNow"
    elif (where == "extension"):
        table = "extension_powerNow"
    else:
        print( "ERROR: Where must be house or extension and not "+where )
        exit(-1)


    #database = r"C:\sqlite\db\pythonsqlite.db"
    database = r"/home/pi/node-red-sqlite.db"

    # create a database connection
    conn = create_connection(database)
    with conn:
        print("Query all records in database")
        select_all_tasks(conn, year, month, day, hour, table, period)

        print( plot_tuples )

    fig, ax = plt.subplots( nrows=1, ncols=1 )  # create figure & 1 axis
    #ax.plot([1, 2, 3, 4])
    ax.plot( plot_tuples )
    plt.ylabel('Average and Accumulated Power (W) Used by the Extension')
    plt.xlabel('Hours of the day 0 (00:00) to 23 (23:00)')

    #fig, ax = plt.subplots( nrows=1, ncols=1 )  # create figure & 1 axis
    #ax.plot([0,1,2], [10,20,3])
    #fig.savefig('path/to/save/image/to.png')   # save the figure to file
    #plt.close(fig)    # close the figure window

    fig.savefig("/home/pi/graphs/"+where+period+".png")   # save the figure to file
    plt.show()
    plt.close(fig)    # close the figure window

    #plt.show()





plot_tuples = [ ]

if __name__ == '__main__':
    main()




