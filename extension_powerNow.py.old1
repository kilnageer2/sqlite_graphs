#! /usr/bin/python3


import sqlite3
from sqlite3 import Error
import datetime
import time


def create_connection(db_file):
    """ create a database connection to the SQLite database
        specified by the db_file
    :param db_file: database file
    :return: Connection object or None
    """
    conn = None
    try:
        conn = sqlite3.connect(db_file)
    except Error as e:
        print(e)

    return conn


def select_all_tasks(conn):
    """
    Query all rows in the extension_powerNow table
    :param conn: the Connection object
    :return:
    """
    cur = conn.cursor()
    cur.execute("SELECT * FROM extension_powerNow")


    # https://note.nkmk.me/en/python-unix-time-datetime/
    dt = datetime.datetime.fromtimestamp(0)
    print(dt)
    # 1970-01-01 09:00:00

    print(dt.timestamp())
    # 0.0

    # https://o7planning.org/11443/python-date-time
    #ts = time.gmtime()
    #print ("struct_time for current time: ")
    #print (ts)

    # Always ue this as it takes care of DST !
    now_struct_time = time.localtime()
    print ("Current local time as struct_time: ");
    print (now_struct_time) 
    # time.struct_time(tm_year=2022, tm_mon=9, tm_mday=8, tm_hour=13, tm_min=9, tm_sec=14, tm_wday=3, tm_yday=251, tm_isdst=0)
    year  = now_struct_time[0]
    month = now_struct_time[1]
    day   = now_struct_time[2]

    #first = (2022, 9, 8,  0, 0,0, 0,0,0)
    first = (year, month, day,  0, 0,0, 0,0,0)
    first_ticks = int(time.mktime(first))
    print ("First ticks: ", first_ticks)

    # Convert struct_time or Tuple to Ticks.
    ticks = int(time.mktime(now_struct_time))
    print ("Now ticks:   ", ticks)
    # Ticks:  1662638954.0

    #last = (2022, 9, 8,  23, 59,59, 0,0,0)
    last = (year, month, day,  23, 59,59, 0,0,0)
    last_ticks = int(time.mktime(last))
    print ("Last ticks:  ", last_ticks)



    # A Tuple with 9 elements.
    '''
    aTupleTime = ( 2017, 4, 15, 13, 5, 34, 0, 0, 0) 
    print ("\n")
    print ("A Tuple represents time: ")
    print (aTupleTime)

    # Convert struct_time or Tuple to Ticks.
    aticks = time.mktime(aTupleTime) 
    print ("Ticks: ", aticks)
    dt = datetime.datetime.fromtimestamp(aticks)
    print(dt)
    '''
    rows = cur.fetchall()

    i = 0
    ticks_per_hour = 60 * 60
    hour_later_ticks = first_ticks + ticks_per_hour
    hours = 0
    hourly_total = 0
    hourly_count = 0
    for row in rows:
        # ticks = 52707330000
        #d = datetime.datetime(1, 1, 1) + datetime.timedelta(microseconds = row//10)
        row_ticks = int( row[0] / 1000 )
        usage = row[1]
        '''
        if ((row_ticks >= first_ticks) and (row_ticks <= last_ticks)):
          #print( ticks, usage )
          dt = datetime.datetime.fromtimestamp( row_ticks )
          print(row_ticks, dt, usage)
          #print(row)
          i = i + 1
          #if (i == 5): break
        '''
        if (row_ticks > hour_later_ticks)):
          hour_later_ticks = hour_later_ticks + ticks_per_hour:
              hours = hours + 1
              hourly_total = 0
              hourly_count = 0
              if (hours > 23): break

        if ((row_ticks >= first_ticks) and (row_ticks <= hour_later_ticks)):
          #print( ticks, usage )
          dt = datetime.datetime.fromtimestamp( row_ticks )
          print(row_ticks, dt, usage)
          hourly_total = hourly_total + usage
          hourly_count = hourly_count + 1
          #print(row)
          i = i + 1
          #if (i == 5): break



def main():
    #database = r"C:\sqlite\db\pythonsqlite.db"
    database = r"/home/pi/node-red-sqlite.db"

    # create a database connection
    conn = create_connection(database)
    with conn:
        print("2. Query all records in database")
        select_all_tasks(conn)


if __name__ == '__main__':
    main()




